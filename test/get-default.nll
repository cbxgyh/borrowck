struct Map { value: Value }
struct Value { }

// fn get_default<'r>(map: &'r mut Map) -> &'r mut Value {
//   match map.get_mut() {
//     Some(v) => v,
//     None => {
//       map.insert(..);
//       map.get_mut(..).unwrap()
//     }
//   }
// }

for<'r>;
let map: &'r mut Map;
let return: &'r mut Value;

let m: &'_ mut Map;
let v: &'_ mut Value;

block START {
    map = use(); // initialize the parameter
    m = &'borrow1 mut *map;
    v = &'_ mut (*m).value; // inlined variant of `get_mut`
    goto SOME NONE;
}

block SOME {
    use(map); //! `*map` is mutably borrowed
    return = v;
    goto END;
}

block NONE {
    use(map); // map.insert(...);
    m = &'borrow2 mut *map; // OK -- ...but not on this path.
    v = &'_ mut (*m).value; // inlined variant of get_mut()
    return = v; // returned
    goto END;
}

block END {
}

assert END/0 in 'borrow1;
assert END/0 in 'borrow2;
assert NONE/0 not in 'borrow1;
assert 'r/0 in 'borrow1;
