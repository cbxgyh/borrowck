// Test that we cannot construct a cycle, if `Foo` is not may-dangle.

// NB: no may_dangle attribute
struct Foo< '= > {
  c: Cell<Option<&'a Foo<'a>>>
}

let foo: Foo<'foo>;
let p: &'pr Foo<'pr1>;

block START {
    foo = use();  // foo = Foo { c: Cell::new(None) };
    p = &'borrow foo; // p = &foo;
    'pr: 'foo;
    'pr1: 'foo;   // foo.c.set(Some(p));
    use(p);
    use(foo);
    goto END;
}

block END {
    drop(foo); //! `foo` is borrowed
}

// At the time when we drop `foo`, it is considered borrowed:
assert END/0 in 'borrow;
