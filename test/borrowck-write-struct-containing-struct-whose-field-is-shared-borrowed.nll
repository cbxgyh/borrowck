// Corresponds to:
//
// ```
// let a = Foo { field: Bar { .. } };
// let b = &a.field.field;
// a = Foo { .. };
// use(b);
// ```
//
// Error: overwriting `a` invalidates `b`.

struct Foo<'-> {
  field: Bar<'0>
}  

struct Bar<'-> {
  field: &'0 mut ()
}  

let a: Foo<'_>;
let b: &'_ &'_ mut ();

block START {
    a = use();
    b = &'_ a.field.field;
    a = use(); //! `a.field.field` is borrowed
    use(b);
    StorageDead(b);
    StorageDead(a);
}

